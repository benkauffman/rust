frameworkVersion: "3"

service: ${self:custom.name}

custom:
  name: ${file(./package.json):name}
  config: ${file(../infra/config/${opt:stage}.js)}
  customDomain: ${file(../infra/plugins/customDomain.js)}
  customCertificate: ${file(../infra/plugins/customCertificate.js)}
  aws: ${file(../infra/aws.yml)}

provider:
  name: aws
  profile: "default"
  stage: ${opt:stage,'dev'}
  region: us-east-1
  logRetentionInDays: 7

  ecr:
    images:
      sls-fargate-rust:
        path: ./

  vpc:
    # (optional) default security groups which are added to tasks that do not contain any overrides.
    securityGroupIds: ${self:custom.aws.securityGroups}
    subnetIds: ${self:custom.aws.subnets}

fargate:
  tasks:
    sls-fargate-rust:
      # (required) the task image you wish to run, references images built within the `ecr` section.
      image: sls-fargate-rust

      vpc:
        # (required) subnets you wish to apply to the given tasks; these override any provider/fargate-level configuration.
        # all tasks MUST be assigned subnets as Fargate operates within `awsvpc` mode.
        subnetIds: ${self:custom.aws.subnets}

      service:
        # (optional) the desired amount of running tasks for the given service.
        desiredCount: 1

        # (optional) used during deployment to determine how many tasks can be provisioned for the transition phase.
        maximumPercent: 200

        # (optional) used during deployment to determine how many tasks are required to remain active for the transition phase.
        minimumHealthyPercent: 100

        # (optional) flag to determine if you wish to provision the task using Fargate Spot.
        # note: at this time there is no fallback measures in-place to ensure that the task will be provisioned using
        # on-demand Fargate if the spot instance can not be acquired.
        spot: false

plugins:
  - serverless-certificate-creator
  - serverless-domain-manager
  - serverless-fargate
  